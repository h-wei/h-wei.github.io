<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pages on My New Hugo Site</title>
    <link>http://blog.ahsort.com/pages/</link>
    <description>Recent content in Pages on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Jan 2021 07:47:06 +0800</lastBuildDate><atom:link href="http://blog.ahsort.com/pages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Edit Distance</title>
      <link>http://blog.ahsort.com/pages/edit-distance/</link>
      <pubDate>Mon, 04 Jan 2021 07:47:06 +0800</pubDate>
      
      <guid>http://blog.ahsort.com/pages/edit-distance/</guid>
      <description>One Edit Distance (bs32)  Given two string s and t determine whether they are one or zero edit distance away. An edit can be described as deleting a character, adding a character, or replacing a character with another character.
 def solve(s, t): m, n = len(s), len(t) if abs(m - n) &amp;gt; 1: return False if m == n: return sum(x != y for x, y in zip(s, t)) &amp;lt; 2 i = j = k = 0 while k &amp;lt; min(m, n): if s[i] !</description>
    </item>
    
    <item>
      <title>Longest Increasing Subsequence</title>
      <link>http://blog.ahsort.com/pages/longest-increasing-subsequence/</link>
      <pubDate>Mon, 04 Jan 2021 07:36:57 +0800</pubDate>
      
      <guid>http://blog.ahsort.com/pages/longest-increasing-subsequence/</guid>
      <description>Longest Increasing Subsequence (lc300)  Given an integer array nums, return the length of the longest strictly increasing subsequence.
A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7]
 def solve(nums): if not nums: return 0 dp = [1 for _ in nums] for i range(1, len(nums)): for j in range(i): if nums[j] &amp;lt; nums[i]: dp[j] = max(dp[i], 1 + dp[j]) return max(dp) def solve(nums): dp = [0 for _ in nums] ans = 0 for x in nums: i = bisect_left(dp, x, hi=ans) dp[i] = x if ans == i: ans += 1 return ans </description>
    </item>
    
    <item>
      <title>Longest Common Subsequence</title>
      <link>http://blog.ahsort.com/pages/longest-common-subsequence/</link>
      <pubDate>Mon, 04 Jan 2021 07:36:43 +0800</pubDate>
      
      <guid>http://blog.ahsort.com/pages/longest-common-subsequence/</guid>
      <description>Longest Common Subsequence (lc1143)  Given two strings text1 and text2, return the length of their longest common subsequence. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. (eg, &amp;ldquo;ace&amp;rdquo; is a subsequence of &amp;ldquo;abcde&amp;rdquo; while &amp;ldquo;aec&amp;rdquo; is not). A common subsequence of two strings is a subsequence that is common to both strings.</description>
    </item>
    
    <item>
      <title>January Challenge 3</title>
      <link>http://blog.ahsort.com/pages/january-challenge-3/</link>
      <pubDate>Sun, 03 Jan 2021 18:05:23 +0800</pubDate>
      
      <guid>http://blog.ahsort.com/pages/january-challenge-3/</guid>
      <description>Beautiful Arrangement  Suppose you have n integers from 1 to n. We define a beautiful arrangemnt as an array that is constructed by these n numbers successfully if one of the following is true for the ith poisition (1 &amp;lt;= i &amp;lt;= n) in this array:
 The number at the ith position is divisible by i. i is divisible by the number at the ith position.  Given an integer n, return the number of the beautiful arrangements that you can construct.</description>
    </item>
    
    <item>
      <title>Weekly Contest 222</title>
      <link>http://blog.ahsort.com/pages/weekly-contest-222/</link>
      <pubDate>Sun, 03 Jan 2021 13:12:10 +0800</pubDate>
      
      <guid>http://blog.ahsort.com/pages/weekly-contest-222/</guid>
      <description>1710. Maximum Units on a Truck  You are assigned to put some amount of boxes onto one truck. You are give a 2D array boxTypes, where boxTypes[i] = [numberOfBoxes[i], numberOfUnitsPerBox[i]] Return the maximum total number of units that can be put on the truck.
 def solve(boxes, truck): boxes.sort(key=lambda x: -x[1]) ans = 0 for s, t, in boxes: if truck &amp;lt;= s: return ans + truck * t ans += pick * t truck -= pick return ans 1711.</description>
    </item>
    
    <item>
      <title>Trie</title>
      <link>http://blog.ahsort.com/pages/trie/</link>
      <pubDate>Sun, 03 Jan 2021 09:34:58 +0800</pubDate>
      
      <guid>http://blog.ahsort.com/pages/trie/</guid>
      <description>class LetterTrieNode: def __init__(self): self.children = [None] * 26 self.word = False class Dict: def __init__(self): self.root = LetterTrieNode() def add(self, word): node = self.root for c in word: i = ord(c) - ord(&amp;#39;a&amp;#39;) if not node.children[i]: node.children[i] = LetterTrieNode() node = node.children[i] node.word = True def has(self, word): node = self._node(word) return node and node.word def startswith(self, prefix): return self._node(word) is not None def _node(self, word): node = self.root for c in prefix: i = ord(c) - ord(&amp;#39;a&amp;#39;) node = node.</description>
    </item>
    
    <item>
      <title>2020 01 02</title>
      <link>http://blog.ahsort.com/pages/2020-01-02/</link>
      <pubDate>Sat, 02 Jan 2021 20:13:18 +0800</pubDate>
      
      <guid>http://blog.ahsort.com/pages/2020-01-02/</guid>
      <description>1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree  Given two binary trees original and cloned and given a reference to a node target in the original tree. The cloned tree is a copy of the original tree. Return a reference to the same node in the cloned tree.
 def solve(original, cloned, target): if not original: return None if original == target: return cloned return solve(original.</description>
    </item>
    
    <item>
      <title>2020-01-01 LeetCode</title>
      <link>http://blog.ahsort.com/pages/my-first-post/</link>
      <pubDate>Fri, 01 Jan 2021 20:11:39 +0800</pubDate>
      
      <guid>http://blog.ahsort.com/pages/my-first-post/</guid>
      <description>No 563. Chain of Blocks [Medium]  You are given a list blocks where each block contains two integers [start, end] where start &amp;lt; end. You can join two blocks if the end of one is equal to the start of another. Return the length of the longest chain of blocks.
 Intution  Returning the length of the longest chain of blocks, so we used to consider it is a dyncamic programming question.</description>
    </item>
    
  </channel>
</rss>
