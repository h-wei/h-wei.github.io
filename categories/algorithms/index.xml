<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on AH~ sort</title>
    <link>http://blog.ahsort.com/categories/algorithms/</link>
    <description>Recent content in Algorithms on AH~ sort</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Apr 2021 16:16:03 +0800</lastBuildDate><atom:link href="http://blog.ahsort.com/categories/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2021 January Week 4</title>
      <link>http://blog.ahsort.com/algorithms/challege/2021-january-week-4/</link>
      <pubDate>Thu, 22 Apr 2021 16:16:03 +0800</pubDate>
      
      <guid>http://blog.ahsort.com/algorithms/challege/2021-january-week-4/</guid>
      <description>Determin if Two Strings Are Close  Two strings are considered close if you can attain one from the other using the following operations:
 Operation 1: Swap any two existing characters. eg. abcde -&amp;gt; aecdb, (b &amp;lt;-&amp;gt; e) Operation 2: Transform **every occurence of one existing character into another existing character, and do the same with the other character. eg. aacabb -&amp;gt; bbcbaa (a &amp;lt;-&amp;gt; b). You can use the operations on either string as many times as necessary.</description>
    </item>
    
    <item>
      <title>2021 January Week 3</title>
      <link>http://blog.ahsort.com/algorithms/challege/2021-january-week-3/</link>
      <pubDate>Wed, 21 Apr 2021 09:32:15 +0800</pubDate>
      
      <guid>http://blog.ahsort.com/algorithms/challege/2021-january-week-3/</guid>
      <description>Get Maximum in Generated Array  Given an integer n. An Array nums of length n+1 is generated in the following way:
 nums[0] = 0 nums[1] = 1 nums[2i] = nums[i], when `2 &amp;lt;= 2i &amp;lt;= n nums[2*i + 1] = nums[i] + nums[i+1], when 2 &amp;lt;= 2*i + 1 &amp;lt;= n Return the maximum integer in the array nums`.   Solution def solve(n): if n &amp;lt; 2: return n x = [0] * (n + 1) x[1] = 1 for i in range(2, n): j, odd = divmod(i, 2) if odd: x[i] = x[j] + x[j+1] else: x[i] = x[j] result = max(result, x[i]) return result Kth Largest Element in an Array  Given an integer array nums and an integer k, return the kth largest element in the array.</description>
    </item>
    
    <item>
      <title>Weekly Contest 223</title>
      <link>http://blog.ahsort.com/algorithms/contest/weekly-contest-223/</link>
      <pubDate>Tue, 20 Apr 2021 19:32:20 +0800</pubDate>
      
      <guid>http://blog.ahsort.com/algorithms/contest/weekly-contest-223/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Top Easy</title>
      <link>http://blog.ahsort.com/algorithms/array/top-easy/</link>
      <pubDate>Sat, 17 Apr 2021 23:13:53 +0800</pubDate>
      
      <guid>http://blog.ahsort.com/algorithms/array/top-easy/</guid>
      <description>Remove Duplates from Sorted Array  Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
 def solve(nums): offset = 0 for x in nums: if x != nums[offset]: offset += 1 nums[offset] = x return offset + 1 if nums else 0 Best Time to Buy and Sell Stock II  You are given an array prices where prices[i] is the price of a given stock on the ith day.</description>
    </item>
    
    <item>
      <title>Reach Target</title>
      <link>http://blog.ahsort.com/algorithms/dynamic-programming/reach-target/</link>
      <pubDate>Tue, 19 Jan 2021 09:53:02 +0800</pubDate>
      
      <guid>http://blog.ahsort.com/algorithms/dynamic-programming/reach-target/</guid>
      <description>Maximum (Minimum) Path to Reach a Target Statement:
 Given a target find maximum (minimum) cost/path/sum to reach a target. Approach: Choose minimum (maximum) path among all possible paths before the current state, then add the current value. routes[i] = max(routes[j] for j in range(k, i-1)) + values[i]
 Min Cost Climbing Stairs LC746  Given a staircase, the i-th step has some non-negative cost cost[i]. You can either climb one or two steps, find minimum cost to reach the top of the staircase.</description>
    </item>
    
  </channel>
</rss>
